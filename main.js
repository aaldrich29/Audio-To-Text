/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AudioToTextPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AudioFileSelectionModal = class extends import_obsidian.Modal {
  constructor({ app, audioFiles, onSelect }) {
    super(app);
    this.audioFiles = audioFiles;
    this.onSelect = onSelect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Select audio files to transcribe" });
    const allCheckboxContainer = contentEl.createDiv("all-checkbox-container");
    const allCheckbox = allCheckboxContainer.createEl("input", { type: "checkbox" });
    allCheckbox.addEventListener("change", () => {
      const checkboxes = contentEl.querySelectorAll(".audio-checkbox");
      checkboxes.forEach((checkbox) => checkbox.checked = allCheckbox.checked);
    });
    allCheckboxContainer.createEl("span", { text: "All" });
    this.audioFiles.forEach((file) => {
      const fileContainer = contentEl.createDiv("file-container");
      const checkbox = fileContainer.createEl("input", { type: "checkbox", cls: "audio-checkbox" });
      fileContainer.createEl("span", { text: file });
    });
    const submitButton = contentEl.createEl("button", { text: "Transcribe" });
    submitButton.addEventListener("click", () => {
      const selectedFiles = [];
      const checkboxes = contentEl.querySelectorAll(".audio-checkbox");
      checkboxes.forEach((checkbox, index) => {
        if (checkbox.checked) {
          selectedFiles.push(this.audioFiles[index]);
        }
      });
      this.onSelect(selectedFiles);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AudioToTextSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("OpenAI API key").setDesc("Enter your OpenAI API key here.").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey || "").onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Context menu: Transcribe to new note").setDesc("Transcribe audio to a new note instead of the current note when you right-click an audio file link and choose transcribe.").addToggle((toggle) => toggle.setValue(this.plugin.settings.transcribeToNewNote).onChange(async (value) => {
      this.plugin.settings.transcribeToNewNote = value;
      await this.plugin.saveSettings();
    }));
  }
};
var AudioToTextPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AudioToTextSettingTab(this.app, this));
    this.addCommand({
      id: "transcribe-audio-files",
      name: "Add transcription to new notes",
      checkCallback: (checking) => {
        if (checking) {
          return !!this.app.workspace.activeLeaf;
        }
        this.handleTranscribeAudioFiles();
      }
    });
    this.addCommand({
      id: "add-transcription-to-active-note",
      name: "Add transcription to active note",
      checkCallback: (checking) => {
        if (checking) {
          return !!this.app.workspace.activeLeaf;
        }
        this.handleAddTranscriptionToActiveNote();
      }
    });
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (this.isSupportedAudioFile(file.extension)) {
        menu.addItem((item) => {
          item.setTitle("Transcribe audio file").setIcon("microphone").onClick(() => {
            if (this.settings.transcribeToNewNote) {
              this.transcribeAudioFile(file);
            } else {
              this.addTranscriptionToActiveNoteFromFile(file);
            }
          });
        });
      }
    }));
  }
  async handleTranscribeAudioFiles() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file found!");
      return;
    }
    const fileContent = await this.app.vault.read(activeFile);
    const audioFileLinks = this.extractAudioFileLinks(fileContent);
    if (audioFileLinks.length === 0) {
      new import_obsidian.Notice("No audio links found in the note!");
      return;
    }
    if (audioFileLinks.length === 1) {
      this.transcribeSingleAudioFile(audioFileLinks[0]);
    } else {
      new AudioFileSelectionModal({ app: this.app, audioFiles: audioFileLinks, onSelect: (selectedFiles) => {
        selectedFiles.forEach((link) => {
          this.transcribeSingleAudioFile(link);
        });
      } }).open();
    }
  }
  async handleAddTranscriptionToActiveNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file found!");
      return;
    }
    const fileContent = await this.app.vault.read(activeFile);
    const audioFileLinks = this.extractAudioFileLinks(fileContent);
    if (audioFileLinks.length === 0) {
      new import_obsidian.Notice("No audio links found in the note!");
      return;
    }
    if (audioFileLinks.length === 1) {
      this.addSingleTranscriptionToActiveNote(audioFileLinks[0]);
    } else {
      new AudioFileSelectionModal({
        app: this.app,
        audioFiles: audioFileLinks,
        onSelect: async (selectedFiles) => {
          let updatedContent = fileContent;
          for (const link of selectedFiles) {
            const text = await this.transcribeSingleAudioFile(link, true);
            if (text) {
              updatedContent += `

### Transcription for ${link}
${text}`;
            }
          }
          await this.app.vault.modify(activeFile, updatedContent);
        }
      }).open();
    }
  }
  async transcribeSingleAudioFile(link, returnText = false) {
    try {
      let audioFile = this.app.vault.getAbstractFileByPath(link);
      if (!audioFile) {
        audioFile = await this.searchFileByName(link);
      }
      if (!audioFile) {
        new import_obsidian.Notice(`Audio file not found: ${link}`);
        return;
      }
      const audioBuffer = await this.app.vault.readBinary(audioFile);
      const text = await this.transcribeAudio(audioBuffer, audioFile.name);
      if (text) {
        if (returnText) {
          return text;
        } else {
          await this.createTranscriptionNoteWithUniqueName(text, audioFile.name);
          new import_obsidian.Notice(`Transcription complete for file: ${link}`);
        }
      } else {
        new import_obsidian.Notice(`Transcription failed for file: ${link}`);
      }
    } catch (error) {
      new import_obsidian.Notice(`An error occurred during transcription for file: ${link}`);
      console.error(`Error during transcription for file: ${link}`, error);
    }
  }
  async addSingleTranscriptionToActiveNote(link) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file found!");
      return;
    }
    const fileContent = await this.app.vault.read(activeFile);
    const text = await this.transcribeSingleAudioFile(link, true);
    if (text) {
      const updatedContent = fileContent + `

### Transcription for ${link}
${text}`;
      await this.app.vault.modify(activeFile, updatedContent);
      new import_obsidian.Notice(`Transcription added to active note for file: ${link}`);
    }
  }
  async addTranscriptionToActiveNoteFromFile(audioFile) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file found!");
      return;
    }
    const fileContent = await this.app.vault.read(activeFile);
    const text = await this.transcribeSingleAudioFile(audioFile.path, true);
    if (text) {
      const updatedContent = fileContent + `

### Transcription for ${audioFile.name}
${text}`;
      await this.app.vault.modify(activeFile, updatedContent);
      new import_obsidian.Notice(`Transcription added to active note for file: ${audioFile.name}`);
    }
  }
  async transcribeAudioFile(audioFile) {
    try {
      const audioBuffer = await this.app.vault.readBinary(audioFile);
      const text = await this.transcribeAudio(audioBuffer, audioFile.name);
      if (text) {
        await this.createTranscriptionNoteWithUniqueName(text, audioFile.name);
        new import_obsidian.Notice("Transcription complete!");
      } else {
        new import_obsidian.Notice("Transcription failed!");
      }
    } catch (error) {
      new import_obsidian.Notice("An error occurred during transcription.");
      console.error("Error during transcription:", error);
    }
  }
  extractAudioFileLinks(content) {
    const regex = /!\[\[([^\]]+\.(mp3|webm|wav|ogg|m4a))\]\]/g;
    const matches = [];
    let match;
    while ((match = regex.exec(content)) !== null) {
      matches.push(match[1]);
    }
    return matches;
  }
  async searchFileByName(fileName) {
    const files = this.app.vault.getFiles();
    return files.find((file) => file.path.endsWith(fileName));
  }
  isSupportedAudioFile(extension) {
    const supportedExtensions = ["mp3", "webm", "wav", "ogg", "m4a"];
    return supportedExtensions.includes(extension.toLowerCase());
  }
  async transcribeAudio(audioBuffer, fileName) {
    const apiKey = this.settings.apiKey;
    if (!apiKey) {
      new import_obsidian.Notice("OpenAI API key not set!");
      return "";
    }
    try {
      const formData = new FormData();
      formData.append("file", new Blob([audioBuffer]), fileName);
      formData.append("model", "whisper-1");
      const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${apiKey}`
        },
        body: formData
      });
      if (!response.ok) {
        const errorText = await response.text();
        new import_obsidian.Notice("API request failed!");
        return "";
      }
      const result = await response.json();
      return result.text;
    } catch (error) {
      new import_obsidian.Notice("Failed to communicate with API.");
      console.error("Failed to communicate with API:", error);
      return "";
    }
  }
  async createTranscriptionNoteWithUniqueName(text, audioFileName) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    let fileName = `${audioFileName} Transcription`;
    let filePath = (0, import_obsidian.normalizePath)(`${activeFile.parent.path}/${fileName}.md`);
    while (await this.app.vault.adapter.exists(filePath)) {
      const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
      fileName = `${audioFileName} Transcription ${timestamp}`;
      filePath = (0, import_obsidian.normalizePath)(`${activeFile.parent.path}/${fileName}.md`);
    }
    try {
      const content = `### Transcription for ${audioFileName}
${text}`;
      await this.app.vault.create(filePath, content);
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file) {
        await this.app.workspace.getLeaf().openFile(file);
      } else {
        console.error("Failed to open transcription note:", filePath);
      }
    } catch (error) {
      new import_obsidian.Notice("Failed to create transcription note.");
      console.error("Error creating transcription note:", error);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({ apiKey: "", transcribeToNewNote: true }, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("Unloading Audio to Text plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
